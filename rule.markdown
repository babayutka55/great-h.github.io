---
layout: default
title: 'ルール - すごい広島'
---

# ルール

すごい広島の参加ルールをもう少し詳しく書きます。


## 基本

* 周りに迷惑を掛けない
* 入退出自由
* エア参加可能
* やることを宣言する
* GitHub に Pull Request すること


## 参加手順例

1. GitHub の Issues  でやることを宣言する
2. 作成した Issues 番号と自分のIDを元にブランチを作成する
3. `/_posts/yyyy-mm-dd-event-xxx.markdown` に「自分の名前」と「作成したIssueへのリンク」を作成する(**[doorkeeper}(http://great-h.doorkeeper.jp/)の方で参加者登録している場合は自動生成されるので不要です**)
4. Pull Request を出す
5. やることを宣言したことをしたり、参加者と情報交換したり、地域貢献する


## GitHub の Issues でやることを宣言する

やること宣言には [GitHub の Issues](https://github.com/great-h/great-h.github.io/issues?state=open) を利用しています。

やることを `issue` として登録します。
他の参加者に自分が何をしているか伝えて、話のタネにしたり、自分がどんな人なのかをさりげなく伝えます。


### もっと挑戦してみる

この小節は読み飛ばしても構いません。

Issue を作成するのに慣れたら、Issue に `label` と `milestone` と `assign` を設定してみましょう。

`label` には `やること宣言` というのを用意しているのでこれを利用してください。
Issue の一覧を表示する際に、このラベルをついているものだけにできます。

`milestone` には 日付を利用しています。参加した日付の `milestone` を設定してください。
その日のすごい広島のやること宣言が終了しているかどうかの確認に利用しています。

`assign` はその `issue` の担当者です。自分を設定することになっています。


## 作成した Issues 番号と自分のIDを元にブランチを作成する

はじめて参加した場合は行うことができないので注意してください。
Issue を作成した場合、すごい広島の管理権限を持っている人が権限を追加してくれるのでそれを待ってください。

権限が付与されると GitHub でブランチを作成できます。
作成するブランチ名は `Issue番号-自分のID` の形式をオススメしています。

例

```
291-eiel
```

上記のブランチ名の場合、対応する Issue が [ここにあります。] (https://github.com/great-h/great-h.github.io/issues/291)

TODO WEBでのブランチの作成方法をかく

## `/_posts/yyyy-mm-dd-event-xxx.markdown` に「自分の名前」と「作成したIssueへリンク」を作成する

**[doorkeeper}(http://great-h.doorkeeper.jp/)で参加者登録を行っている場合はSNSのID追加の手順は自動化されているので不要です**

参加したことが残るようにして欲しいので、ウェブページの更新を行ないます。
参加したイベントページが [_posts](https://github.com/great-h/great-h.github.io/tree/master/_posts) の中にあります。
開催日を元にファイルを指定しているので、該当するファイルを探してください。

このファイルに自分の名前やSNSのIDとさきほど作成した Issue へのリンクを追加します。

例

```
### [eiel](http://eiel.info)

* [やること宣言](https://github.com/great-h/great-h.github.io/issues/291)

```

ここのフォーマットについては「[記事のフォーマット](#記事のフォーマット)」を参照してください。

これらの編集は GitHub の中で行えます。
Edit から編集を行えます。


## Pull Request を出す

サイトに参加表明することができたので メインのブランチに取り込みの依頼をします。
[すごい広島のリポジトリページ](https://github.com/great-h/great-h.github.io) を開くと Pull Request するボタンがあります。

ここから Pull Request してください。
ボタンを押していくだけでOKです。


## やることを宣言したことをしたり、参加者と情報交換したり、地域貢献する

Pull Request ができたらやること宣言したことをしたり、近くの人と会話したりしましょう。
その際に面白い話などがあれば、自分の Issue にコメントしたりブログにしたりして、再度プルリクエストしたりしましょう。

## サイトのプレビュー方法

pull request をする前に動作確認をしてみましょう。自分のコンピュータ上でウェブサイトを確認できます。

### 事前準備

* ruby のインストール
* `bundle install` の実行

### プレビューの方法

* `rake preview` の実行します
* [http://localhost:4000/](http://localhost:4000/) をブラウザでひらきます。

この時、ブラウザを自動で開くようになっています。
サーバが立ち上がるより速く開くことがあります。
その場合は更新ボタンを押してください。


## おまけ

なれてきたら他の人の Pull Request をレビュー しましょう。

レビューが二つついたら マージをするというルールにしています。
もし、あなたが二人めになったら、マージボタンを押してマージしましょう。
コンフリクトする場合は、Webからはできないので、他の人に任せましょう。


<h2 id="記事のフォーマット">記事のフォーマット</h2>

「すごい広島」 に参加するとイベントページを更新することになります。
詳しくは「[記事へのリンクを追加する](#記事へのリンクを追加する)」を参照してください。

このイベントページ更新する時のフォーマットは 以下のようになります。

```
## [名前](自分ウェブサイトなど)

参加コメント、感想などを書く

* [ページ名](ページのURL)
* [ページ名](ページのURL)
```

`名前` には 自分の名前、もしくは GitHubやTwitter ID を書きます。

`自分のウェブサイトなど` には、自分のウェブサイトや、GitHub や Twitter などのプロフィール表示のURLを書きます。

`参加コメント、感想などをかく` には、参加したときの感想など好きなことを書きます。書かなくても大丈夫です。

`ページ名` には、書いたブログ記事のタイトル、もしくは、何をしたか書きます。

`ページURL` にはやったことがわかる ウェブページのURL を書きます。
Togetter などを利用してもいいですし、作成した Issue にコメントで書いて構いません。
